---
import BaseLayout from "../../layouts/BaseLayout.astro";
import ArchivePostList from "../../layouts/ArchivePostList.astro";

const { tag } = Astro.params;
let posts = [];

// Fetch posts data from the Django backend
const apiUrl = process.env.API_URL || 'http://127.0.0.1:8000/api/posts/';
const fetchPosts = async () => {
  const response =await fetch(`${apiUrl}`);
  const data = await response.json();
  const allPosts = data.map(post => ({
    url: `/posts/${post.id}`,
    frontmatter: {
      title: post.title,
      pubDate: post.pub_date,
      tags: post.tags ? post.tags.split(",") : [],
      cover: { url: post.cover_url || '' },
    },
    content: post.content,
  }));

  // Filter posts by tag
  posts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
  posts.sort((a, b) => Date.parse(b.frontmatter.pubDate) - Date.parse(a.frontmatter.pubDate));
};

await fetchPosts();

export async function getStaticPaths() {
  // Fetch all posts to extract unique tags
  const response = await fetch(`${apiUrl}`);
  const data = await response.json();
  const allPosts = data.map(post => ({
    url: `/posts/${post.id}`,
    frontmatter: {
      title: post.title,
      pubDate: post.pub_date,
      tags: post.tags ? post.tags.split(",") : [],
      cover: { url: post.cover_url || '' },
    },
    content: post.content,
  }));

  const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];

  return uniqueTags.map((tag) => ({
    params: { tag },
    props: { posts: allPosts.filter((post) => post.frontmatter.tags.includes(tag)) },
  }));
}
---

<BaseLayout primaryTitle={tag}>
  <section class="archive">
    <div class="section-content section-tag">
      <div class="archive-tag">
        <h2 class="tag-header">{tag}</h2>
        <div class="tag-post-list">{
          posts.length !== 0 ? <ArchivePostList posts={posts} /> : <div class="no-posts">暂无文章</div>}</div>
      </div>
    </div>
  </section>
</BaseLayout>